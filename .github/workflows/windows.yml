# 参考文档 https://docs.github.com/en/free-pro-team@latest/actions/
name: Windows
on: 
  # push代码时触发workflow
  push:
    paths:
      - '.github/workflows/windows.yml'
  # pull_request时触发workflow
  pull_request:
    paths:
      - '.github/workflows/windows.yml'
jobs:
  build:
    name: Build
    # 运行平台， windows-latest目前是windows server 2019 
    # 参考文档 https://github.com/actions/virtual-environments/blob/main/images/win/Windows2019-Readme.md
    runs-on: windows-2019
    strategy:
      # 矩阵配置
      matrix:
        include:
          # 5.9.9 参考 https://mirrors.cloud.tencent.com/qt/online/qtsdkrepository/windows_x86/desktop/qt5_599/
          - qt_ver: 5.9.9
            qt_arch: win32_msvc2015
            msvc_arch: x86
            qt_arch_install: msvc2015
        
          # 5.12.10 参考 https://mirrors.cloud.tencent.com/qt/online/qtsdkrepository/windows_x86/desktop/qt5_51210/            
          - qt_ver: 5.12.10
            qt_arch: win32_msvc2017
            msvc_arch: x86
            qt_arch_install: msvc2017
          # 5.15.2 参考 https://mirrors.cloud.tencent.com/qt/online/qtsdkrepository/windows_x86/desktop/qt5_5152/
          - qt_ver: 5.15.2
            qt_arch: win32_msvc2019
            msvc_arch: x86
            qt_arch_install: msvc2019  
    env:
      targetName: multipersionCallDemo.exe
      VCINSTALLDIR: 'C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC'
    # 步骤
    steps:
       # download sdk
      - name: download sdk
        shell: cmd
        run: |
            cd PC/nertcsample-multipersoncall-QT
            echo download rtc
            curl  https://yx-web-nosdn.netease.im/package/1607656913/NERtc_windows_SDK_v3.8.2.zip?download=NERtc_windows_SDK_v3.8.2.zip -o nertc_sdk.zip
            echo start unzip
            unzip nertc_sdk.zip
            echo copy files
            pwd
            cp  -r nertc_sdk_windows_12111120/api/          nertc_sdk/api/
            cp  -r nertc_sdk_windows_12111120/lib/x86/         nertc_sdk/lib/x86/
            cp  -r nertc_sdk_windows_12111120/dll/x86/         nertc_sdk/lib/dll/
           
            
      # 安装Qt
      - name: Install Qt
        # 使用外部action。这个action专门用来安装Qt
        uses: jurplel/install-qt-action@v2.10.0
        with:
          # Version of Qt to install
          version: ${{ matrix.qt_ver }}
          # Target platform for build
          # target: ${{ matrix.qt_target }}
          arch: ${{ matrix.qt_arch }}
          aqtversion: '==0.10.0'
          cached: 'false'
      # 拉取代码
      - uses: actions/checkout@v1
        with:
          fetch-depth: 1
          

          
      # 编译msvc
      - name: build-msvc
        shell: cmd
        run: |
          cd ./PC/nertcsample-multipersoncall-QT
          call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" ${{ matrix.msvc_arch }}
          qmake
          nmake
      # tag 打包
      - name: package
        id: package
        #if: startsWith(github.event.ref, 'refs/tags/')
        env:
          VCINSTALLDIR: 'C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC'
          archiveName: ${{ matrix.qt_ver }}-${{ matrix.qt_arch }}
        shell: pwsh
        run: |
          & scripts\windows-publish.ps1 ${env:archiveName} ${env:targetName}
          # 记录packageName给后续step
           $name = ${env:archiveName}
           echo "::set-output name=packageName::$name"
      # 上传artifacts          
      - uses: actions/upload-artifact@v2
        with:
          name: ${{ steps.package.outputs.packageName }}
          path: ${{ steps.package.outputs.packageName }}.zip
      # tag 上传Release
      - name: uploadRelease
        #if: startsWith(github.event.ref, 'refs/tags/')
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ${{ steps.package.outputs.packageName }}.zip
          asset_name: ${{ steps.package.outputs.packageName }}.zip
          tag: ${{ github.ref }}
          overwrite: true
